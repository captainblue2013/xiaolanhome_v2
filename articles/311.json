{
  "id": 311,
  "title": "package.json里的一些属性讲解",
  "keywords": [
    "node",
    "npm",
    "package"
  ],
  "content": "<blockquote><p>内容来自 <a href=\"https://docs.npmjs.com/files/package.json\">npm官方文档</a> , 本文做中文解释.</p></blockquote>\n\n<h3>name, version</h3>\n\n<p>首先, 包名字是<strong>必须的</strong>. 版本号也是<strong>必须的</strong>.</p>\n\n<p><strong>npm</strong>规定了, 一个<strong>package</strong>是由<strong>名字</strong>加<strong>版本号</strong>作为唯一标识的.</p>\n\n<p>比如 <code>express@4.2.0</code> , <code>koa@2.1.1</code> , 不同的包名或者版本号, 对应的内容是不一样的.</p>\n\n<p>以上内容比较好理解, 接下来我补充几点: </p>\n\n<ul><li>包名必须少于等于 <strong>214</strong> 字符, </li><li>包名不能以 <code>.</code>或<code>_</code>开头</li><li>包名不能含有大写字母 (历史原因, 有的老包还有大写字母,新的已经不能用大写字母)</li><li>另外, 一些<code>URL</code>规范里不允许的字符也不能用(具体哪些字符就需要大家自己查查了)</li><li>建议不要在包名里包含<code>js</code><code>node</code>等字眼, 因为<strong>npm</strong>默认就是<strong>js</strong>或<strong>node</strong>的</li><li>因为包名最终会用在<code>require</code>语句里, 所以尽可能短一些,但要注意能明确表达自己的用途</li><li>你开发一个包之前, 最好自己上 <a href=\"https://www.npmjs.com/\">npm官网</a>看看名字是不是已经被占用了(很重要)</li></ul>\n\n<p>对于版本号, <strong>npm</strong>使用业界标准的 <code>{major}.{feature}.{patch}</code> 模式</p>\n\n<p>所以 <code>1.4.1</code>到<code>1.4.2</code>可能是修复个小bug</p>\n\n<p><code>1.4.1</code>到<code>1.5.0</code>可能是加了新功能</p>\n\n<p><code>1.4.1</code>到<code>2.0.0</code>的话, 可能就是变化很大的两个东西了.</p>\n\n<blockquote><p>Tips</p><p>如果你要发布包到<strong>npm</strong>, 相同的包名, 相同的版本号, 只能发布一次,</p><p>所以如果你修改了代码, 需要更新版本号才能<strong>publish</strong>,</p><p>具体修改哪一位, 要看你修改了多少东西.</p></blockquote>\n\n<h3>description, keywords</h3>\n\n<p>这两个放在一起讲.</p>\n\n<p>这两个字段都是用来在<strong>npm官网</strong>上搜索的, 区别是一个是字符串, 一个是字符串数组.</p>\n\n<p>不难理解, <strong>npm</strong>会对<code>description</code>做分词搜索, 而对于 <code>keywords</code>会做精准搜索.</p>\n\n<blockquote><p>Tips</p><p>官方并未说明, 以上关于分词与否, 纯属猜测.</p></blockquote>\n\n<h3>homepage</h3>\n\n<p>如果你有时间, 可以为你的包做一个官网之类的, 大型的项目常见.</p>\n\n<h3>bugs</h3>\n\n<p>这个字段并不是说这个包还有 <strong>bug</strong>, 首先我们看看例子 </p>\n\n<pre><code>{ \n\t&quot;url&quot; : &quot;https://github.com/owner/project/issues&quot;,\n\t&quot;email&quot; : &quot;project@hostname.com&quot;\n}</code></pre>\n\n<p>这个字段其实是提供给使用者上报 <strong>bugs</strong>的途径, 可以填一个<strong>email</strong>或者一个<strong>issue地址</strong></p>\n\n<blockquote><p>Tips</p><p>如果你只想提供一个<strong>issue地址</strong>, 那么<strong>bugs</strong>可以只是一个字符串</p></blockquote>\n\n<h3>license</h3>\n\n<p>这个......不想多说, 自行了解吧</p>\n\n<h3>author, contributors</h3>\n\n<p>这是关于作者或者其他开发人员信息的字段, 含义很好理解, 我们看一个例子:</p>\n\n<pre><code>{ \n\t&quot;name&quot; : &quot;Barney Rubble&quot;, \n\t&quot;email&quot; : &quot;b@rubble.com&quot;, \n\t&quot;url&quot; : &quot;http://barnyrubble.tumblr.com/&quot;\n}</code></pre>\n\n<p><strong>author</strong>和<strong>contributors</strong>就是放置型如上面这样的对象来描述人物信息的, 区别是, <strong>author</strong>是单个, 而<strong>contributors</strong>是数组.</p>\n\n<blockquote><p>Tips</p><p>非必须信息, 可以出名以后再加.</p></blockquote>\n\n<h3>files</h3>\n\n<p>这个不是必选项, 也并不常见, 但是很重要, 因为有配置这个信息会显得非常专业.</p>\n\n<p><strong>files</strong>是一个数组, 它描述了你 <code>npm publish</code>的时候推送到<strong>npm</strong>服务器的文件列表,支持目录和通配 比如</p>\n\n<pre><code>&quot;files&quot;: [\n    &quot;LICENSE&quot;,\n    &quot;History.md&quot;,\n    &quot;Readme.md&quot;,\n    &quot;index.js&quot;,\n    &quot;lib/&quot;\n  ],</code></pre>\n\n<p>反过来, 你可以通过一个 <code>.npmignore</code> 文件来排除一些文件, 防止大量的垃圾文件推送到<strong>npm</strong>, 规则上和你用的<code>gitignore</code>是一样的.</p>\n\n<blockquote><p>Tips</p><p>如果你的项目下有 <strong>.gitignore</strong> 文件, 那么它也能充当<strong>.npmignore</strong>的功能.</p><p>这意味着, 如果没有特别的需求, 一个<strong>.gitignore</strong>就行了.</p></blockquote>\n\n<h3>main</h3>\n\n<p>这个是一个重要属性,原文对这个描述比较绕, 实际上可以理解为 <strong>入口文件</strong></p>\n\n<pre><code>&quot;main&quot;:&quot;./src/index.js&quot;,</code></pre>\n\n<p>以上面的例子来说, 如果你的包名是<code>foo</code>, 当用户代码<code>require(&#39;foo&#39;)</code>时,</p>\n\n<p>相当于<strong>require</strong>了你包目录下的 <code>./src/index.js</code>文件.</p>\n\n<p>如果没有提供这个字段, 默认是项目根目录下的<code>index.js</code></p>\n\n<h3>bin</h3>\n\n<p>这也是一个重要属性, 它定义了一系列可执行命令, 在全局安装的命令行包里尤其多见.</p>\n\n<p>这里提供一个<strong>pm2</strong>的<code>bin</code>例子:</p>\n\n<pre><code>&quot;bin&quot;: {\n\t&quot;pm2&quot;: &quot;./bin/pm2&quot;,\n\t&quot;pm2-dev&quot;: &quot;./bin/pm2-dev&quot;,\n\t&quot;pm2-docker&quot;: &quot;./bin/pm2-docker&quot;,\n\t&quot;pm2-runtime&quot;: &quot;./bin/pm2-runtime&quot;\n},</code></pre>\n\n<p>上面这个对象的意思是, 安装完以后, 输入<code>pm2</code>实际上是运行<code>{模块所在目录}/bin/pm2</code>, 以此类推.</p>\n\n<p>带有<code>bin</code>信息的包, 在局部安装后, 可执行文件会在<code>./node_modules/.bin</code>下,</p>\n\n<p>如果是全局安装, 可执行文件会在 <code>$PATH</code> 里对应<code>npm</code>那个目录下.</p>\n\n<blockquote><p>Tips</p><p>有些朋友安装node环境的方式比较奇怪, 没有把全局安装nodule的路径加到 $PATH里,</p><p> 导致 npm install -g 以后提示命令找不到, 最好检查一下自己的$PATH</p></blockquote>\n\n<h3>man</h3>\n\n<p>这里是<code>manuel</code>, 是<strong>手册</strong>的意思, 不是男人, 也不是上面说到的<strong>main</strong></p>\n\n<p>这个是指定一个(或多个)文件, 用于执行<code>man {包名}</code>时, 展现给用户的手册内容.</p>\n\n<p>稍微有点<strong>linux</strong>基础都懂, 不细说.</p>\n\n<h3>directories</h3>\n\n<p>这个字段挺无语的, 它是一个<strong>object</strong>, 包含了<code>lib</code><code>bin</code><code>man</code><code>doc</code><code>example</code><code>test</code>等属性, </p>\n\n<p>主要是用来告诉用户我的某些功能目录放在哪里, 也是一个<strong>显得专业</strong>的功能.</p>\n\n<p>除此以外暂时没有实际应用.</p>\n\n<pre><code>&quot;directories&quot;: {\n\t&quot;bin&quot;: &quot;./bin&quot;,\n\t&quot;doc&quot;: &quot;./doc&quot;,\n\t&quot;lib&quot;: &quot;./lib&quot;,\n\t&quot;man&quot;: &quot;./man&quot;\n},</code></pre>\n\n<h3>repository</h3>\n\n<p>这个属性很明显, 是放置你的<code>git</code>地址的, 格式如下:</p>\n\n<pre><code>&quot;repository&quot; :{ \n\t&quot;type&quot; : &quot;git&quot;, \n\t&quot;url&quot; : &quot;https://github.com/npm/npm.git&quot;\n},</code></pre>\n\n<blockquote><p>Tips</p><p>这个部分有一些缩写的方式, 自己看原文吧.</p></blockquote>\n\n<h3>scripts</h3>\n\n<p>这个是重点!</p>\n\n<pre><code>&quot;scripts&quot;: {\n    &quot;start&quot;: &quot;node app.js&quot;,\n    &quot;any&quot;: &quot;any command &amp;&amp; exit 0&quot;,\n},</code></pre>\n\n<p>以上两个配置, 提供了 <code>npm start</code>和<code>npm run any</code>两个命令对应的实际操作.</p>\n\n<p>至于什么时候需要<code>run</code>什么时候不需要, </p>\n\n<p>可以详细看 <a href=\"https://docs.npmjs.com/misc/scripts\">npm scripts</a>, 这个够单独开一章来说明.</p>\n\n<blockquote><p>Tips </p><p>除了定义一些快捷命令, scripts 还有一些钩子性质的预定义命令,</p><p>如 preinstall , postinstall 可以在包安装前后 <strong>自动</strong> 执行一些操作</p><p>详细还是看上面的链接.</p></blockquote>\n\n<h3>config</h3>\n\n<p>这是一个<code>object</code>结构, 定义了一些执行<code>scripts</code>时的配置参数之类, 和<code>scripts</code>属性关系很大, 个人目前还没用过, 等我研究好了再补充.</p>\n\n<p>目前可以参考 <a href=\"https://docs.npmjs.com/misc/config\">npm-config</a></p>\n\n<h3>dependencies, devDependencies, peerDependencies</h3>\n\n<p>前两个大家很熟悉了, 不用展开讲了, 唯一需要提醒的是, 要自己判断什么包安装在<strong>dev</strong>就行.</p>\n\n<p>值得注意的是 <strong>peerDependencies</strong> 这个并不常见的属性, </p>\n\n<p>它是用于你这个包并不依赖模块<strong>A</strong>, 但是要使用你这个包, 必须当前项目装了<strong>A</strong>.</p>\n\n<p>比如你的 <code>my-project</code> , 已经引入了<code>\u0010people</code>模块, 而还有一个<code>people-fly</code>, 必须你的<code>my-project</code>有用到<code>people</code>才可以用, 但是<code>people-fly</code>的源码里并没有直接使用<code>people</code>.</p>\n\n<p>这时候, <code>people-fly</code>的<strong>package.json</strong> 里就会声明<code>peerDependencies</code>包含<code>people </code></p>\n\n<p>以上这一段多读几次应该能理解的.</p>\n\n<h3>bundledDependencies</h3>\n\n<p>这个是一个特定场景的属性, 我个人没用过.</p>\n\n<p><strong>bundledDependencies</strong>是一个字符串数组, 内容只能是在<strong>dependencies, devDependencies</strong>两个里面声明过的包才行.</p>\n\n<p>这样可以在<code>npm publish</code>和<code>npm pack</code>的时候将一些依赖打包进去.</p>\n\n<blockquote><p>Tips:</p><p>单纯声明在dependencies里的包, 会在安装的时候, 再从npm那边安装一遍.</p><p>而打包了的, 就会在当前模块安装的时候, 就一并下载下来了.</p><p>具体怎么应用就自己想想吧, 我没用过.</p></blockquote>\n\n<h3>optionalDependencies</h3>\n\n<p>可有可无的依赖?</p>\n\n<p>npm通常会在某些依赖安装失败时报错, 中断操作, 而写在<strong>optionalDependencies</strong>的依赖则不会.</p>\n\n<p>要妥善支持这个功能, 你的源码里面也要注意判断这些特定的依赖是否存在.</p>\n\n<p>其实是很麻烦很扯淡的操作.</p>\n\n<h3>engines</h3>\n\n<pre><code>&quot;engines&quot; : { \n\t&quot;node&quot; : &quot;&gt;=0.10.3 &lt;0.12&quot; \n}</code></pre>\n\n<p>这个属性可以声明你的包需要在怎样的<code>node</code>环境下运行 (<code>npm</code>也一样可以声明)</p>\n\n<p>只不过,</p>\n\n<p>只有在用户配置 <strong>npm</strong> 的<code>engine-strict</code>后, 才会有意义, 不然只会冒出一个 <code>warning</code> (程序员看不到 <code>warning</code>)</p>\n\n<h3>engineStrict</h3>\n\n<p>忽略, 最新的 <code>npm</code>已经废弃这个了.</p>\n\n<h3>os</h3>\n\n<p>看两个例子</p>\n\n<pre><code>&quot;os&quot; : [ &quot;darwin&quot;, &quot;linux&quot; ]</code></pre>\n\n<p>.</p>\n\n<pre><code>&quot;os&quot; : [ &quot;!win32&quot; ]</code></pre>\n\n<p>显然意见就是操作系统的黑白名单, </p>\n\n<p>比如你开发了一个工具, 只支持<strong>OSX</strong>, 不支持<strong>Windows</strong> (这合情合理!)</p>\n\n<p>就可以通过这个来声明.</p>\n\n<h3>cpu</h3>\n\n<p>看两个例子</p>\n\n<pre><code>&quot;cpu&quot; : [ &quot;x64&quot;, &quot;ia32&quot; ]</code></pre>\n\n<p>.</p>\n\n<pre><code>&quot;cpu&quot; : [ &quot;!arm&quot;, &quot;!mips&quot; ]</code></pre>\n\n<p>不想解释了, 能玩到这个属性的人, 已经不需要看这个了.</p>\n\n<h3>private</h3>\n\n<p>这个设置为<code>true</code>, 就会无法<code>npm publish</code>,</p>\n\n<p>怎么说呢, 有用的吧.</p>",
  "createdAt": 1519290180,
  "modified": 1519295054
}