{
  "id": 318,
  "title": "2018总结: 你咋才来啊",
  "keywords": [
    "docker",
    "devops",
    "node"
  ],
  "content": "<blockquote><p>引子</p><p>忙完一通人生大事，终于有时间总结一下2018年后大半年的所得所想。</p></blockquote>\n\n<h3>0x00  Docker以及服务编排</h3>\n\n<p>其实2018并不是我的Docker年，准确来说我是从2017年正式生产容器化的。</p>\n\n<p>之所以把docker列入第一个主题，原因有二</p>\n\n<ul><li>壹: 之前主要是把PHP和Golang服务装入容器，2018年有机会在Node上做功夫</li><li>貳: 之前有幸团队中的容器基础建设比较好，2018年新团队，我要自己搭建很多基础支持</li></ul>\n\n<p>所以在Docker技能树上，2018的收获还是十分大的，很多以前团队想不清的方案，最终自己实现的时候，发现是殊途同归。</p>\n\n<p><strong>原来之前用过的早就是最佳实践了啊！</strong></p>\n\n<p>其次要说说 <code>Rancher</code>方面，</p>\n\n<p>得益于<code>Rancher</code>这个强大的体系，让团队的后端微服务体系一开始就处于一个很高的起点上。</p>\n\n<p>以前我们常说的 <strong>配置中心</strong>、<strong>服务高可用</strong>、<strong>健康检查</strong>、<strong>负载均衡</strong>、<strong>横向扩展</strong>、<strong>平滑升级</strong>、<strong>一键回滚</strong></p>\n\n<p>在这里已经开箱即用了。于是乎，只需要按自己喜好，加入监控即可。</p>\n\n<p>这些基础设施，在过去都要一team人花很多力气才能拉扯起来的，现在变成了入门必备。</p>\n\n<p><strong>总结：</strong>\n容器化是一个政治正确的事情，可以让开发专注于业务实现，而不需要关心基础实施细节。</p>\n\n<p>接地气的说法就是，我只管开发我的服务，它运行在哪、怎么运行，都不需要我关心了。</p>\n\n<h3>0x01 devops  与  oooooooops</h3>\n\n<p><code>devops</code>是2018另一个主旋律。</p>\n\n<p>一开始用过<code>jenkins</code>，确实是很强啊，直到我用了<code>gitlab-ci</code>。</p>\n\n<p>这里无意对比哪个更好，选择<code>gitlab-ci</code>完全只是因为代码存在<code>gitlab</code>，不喜欢自己折腾的都自然地选择了<code>gitlab</code>全家桶了。</p>\n\n<p>重点是，<code>gitlab-ci</code>很完美。 详细可以看另一篇文章<a href=\"http://www.lanhao.name/article/307\">《gitlab-ci 坑后感与指北》</a>。</p>\n\n<blockquote><p>前后端和测试都说好！</p></blockquote>\n\n<p>而在使用<code>gitlab-ci</code>实践devops的过程中，又强烈依赖各种docker镜像，很多还是要自己去打造的onbuild环境。 </p>\n\n<p>所以我现在非常推崇 <code>docker</code>+<code>gitlab-ci</code>这个对搭档，可以相辅相成，相得益彰。</p>\n\n<p><strong>在这里特别感谢老东家开启了我devops的大门</strong></p>\n\n<p>而在2018年这大半年的时间里，自己亲手操刀一个devops体系，又有了更加深入的体会。</p>\n\n<p>展望2019年，还是会秉承强哥灌输的理念： <strong>把自动化惊醒到底</strong></p>\n\n<h3>0x10 更好地开发Node服务</h3>\n\n<p>开发者始终离不开开发的话题的。</p>\n\n<p>2018年在Node开发上的实践体会，有了另一个层面的突破。</p>\n\n<ul><li><p><strong>更多的自动化</strong></p><p>如果只是简单的用node开发一些http服务，显然不值得书写。</p><p>这一次，我们开发了一系列的命令行工具。</p><p>包括 </p><ul><li>项目脚手架</li><li>自动生成swagger文档(得益于研究了一年的AST)</li><li>与devops相关的配置自动生成</li><li>服务之间的通信代码自动生成</li></ul><p>以上这些，给团队带来的感受就是，注意力更集中了。</p><p>只需要一门心思理解业务，开发服务，其他的环节就交给自动化去做好了，毕竟，机器人永远比人靠谱。</p></li><li><p><strong>视觉更高</strong></p><p>相应地，正是因为微服务基础架构建设的进步，业务服务划分时会有更不一样的视觉。</p><p>明显地这一次，更多地考虑服务的边界、数据的边界。</p></li></ul>\n\n<p>2019年，考虑在一些环节逐渐引入<code>typescript</code>，毕竟大家都说好，值得试试。</p>\n\n<p>又或者，在团队中带起一波<code>Golang</code>开发，丰富一下技术盏。</p>\n\n<h3>0x11 终章</h3>\n\n<p>最后再深刻点明一下个人的指导思想：</p>\n\n<p><strong>尽量自动化！！解放生产力！！</strong></p>",
  "createdAt": 1550499993,
  "modified": 1550499993
}