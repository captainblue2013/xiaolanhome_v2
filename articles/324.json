{
  "id": 324,
  "title": "一篇就够·JavaScript隐式类型转换",
  "keywords": [
    "Javascript",
    "类型转换"
  ],
  "content": "<blockquote><p>Javascript 隐式类型转换，<strong>一篇就够了</strong> ！</p></blockquote>\n\n<ul><li><a href=\"#0\">一图胜千言</a></li><li><a href=\"#1\">数学算符中的类型转换</a></li></ul>\n\n<pre><code>- [减、乘、除](#11)\n- [特殊的加法](#12)</code></pre>\n\n<ul><li><p><a href=\"#2\">逻辑语句中的类型转换</a></p><ul><li><a href=\"#21\">单个变量</a></li><li><a href=\"#22\">使用 == 比较中的5条规则</a></li><li><a href=\"#23\">通过几个特别的题目来练习一下吧</a></li></ul></li><li><p><a href=\"#3\">附录1：类型转换表</a></p></li></ul>\n\n<p>&lt;span id=&quot;0&quot;&gt;&lt;/span&gt;</p>\n\n<h3>一图胜千言</h3>\n\n<p><code>Javascript</code>发生隐式类型转换时的各种猫腻，相信各位开发者已经饱受折磨。</p>\n\n<p>即便是多年的 JS 老兵， 也不一定能很好地理顺这背后的规律。</p>\n\n<p>接下来，本文通过几个产生<strong>隐式类型转换</strong>的场景，务必让你彻底掌握这个知识点。</p>\n\n<blockquote><p>提示1： 请充分注意到行文中出现的 ⭐️， 意味着这是重点句子。</p><p>提示2： 阅读过程，可以随时翻看【附录】</p></blockquote>\n\n<p><img alt=\"\" src=\"https://lanhaooss.oss-cn-shenzhen.aliyuncs.com/images/how-it-fucking-work.png\"/></p>\n\n<p>&lt;span id=&quot;1&quot;&gt;&lt;/span&gt;</p>\n\n<h3>数学算符中的类型转换</h3>\n\n<p>因为JS并没有类型声明，所以任意两个变量或字面量，都可以做加减乘除。</p>\n\n<p>&lt;span id=&quot;11&quot;&gt;&lt;/span&gt;</p>\n\n<h4>1. 减、乘、除</h4>\n\n<p><strong>⭐️我们在对各种非<code>Number</code>类型运用数学运算符(<code>- * /</code>)时，会先将非<code>Number</code>类型转换为<code>Number</code>类型;</strong></p>\n\n<p><code>javascript\n1 - true // 0， 首先把 true 转换为数字 1， 然后执行 1 - 1\n1 - null // 1,  首先把 null 转换为数字 0， 然后执行 1 - 0\n1 * undefined //  NaN, undefined 转换为数字是 NaN\n2 * [&#39;5&#39;] //  10， [&#39;5&#39;]首先会变成 &#39;5&#39;, 然后再变成数字 5\n</code></p>\n\n<blockquote><p>上面例子中的 [&#39;5&#39;]的转换，涉及到<strong>拆箱操作</strong>，将来有机会再出一篇文章说明。</p></blockquote>\n\n<p>&lt;span id=&quot;12&quot;&gt;&lt;/span&gt;</p>\n\n<h4>2.加法的特殊性</h4>\n\n<p>⭐️为什么加法要区别对待， 因为JS里 <code>+</code>还可以用来拼接字符串。谨记以下3条：</p>\n\n<ol><li>当一侧为<code>String</code>类型，被识别为字符串拼接，并会优先将另一侧转换为字符串类型。</li><li>当一侧为<code>Number</code>类型，另一侧为原始类型，则将原始类型转换为<code>Number</code>类型。</li><li>当一侧为<code>Number</code>类型，另一侧为引用类型，将引用类型和<code>Number</code>类型转换成字符串后拼接。</li></ol>\n\n<blockquote><p>⭐️以上3点，优先级从高到低。即 <code>3+&#39;abc&#39;</code> 会应用规则1，而 <code>3+true</code>会应用规则2. </p></blockquote>\n\n<p><code>javascript\n123 + &#39;123&#39; // 123123   （规则1）\n123 + null  // 123    （规则2）\n123 + true // 124    （规则2）\n123 + {}  // 123[object Object]    （规则3）\n</code></p>\n\n<p>&lt;span id=&quot;2&quot;&gt;&lt;/span&gt;</p>\n\n<h3>逻辑语句中的类型转换</h3>\n\n<p>当我们使用 <code>if</code> <code>while</code> <code>for</code> 语句时，我们期望表达式是一个<code>Boolean</code>，所以一定伴随着隐式类型转换。而这里面又分为两种情况：\n&lt;span id=&quot;21&quot;&gt;&lt;/span&gt;</p>\n\n<h4>1.单个变量</h4>\n\n<p>⭐️如果只有单个变量，会先将变量转换为Boolean值。</p>\n\n<p>我们可以参考<strong>附录</strong>的转换表来判断各种类型转变为<code>Boolean</code>后的值。</p>\n\n<p>不过这里有个小技巧： </p>\n\n<blockquote><p>只有 <code>null</code> <code>undefined</code> <code>&#39;&#39;</code> <code>NaN</code> <code>0</code> <code>false</code> 这几个是 <code>false</code></p><p>其他的情况都是 <code>true</code>，比如 <code>{}</code> , <code>[]</code></p></blockquote>\n\n<p>&lt;span id=&quot;22&quot;&gt;&lt;/span&gt;</p>\n\n<h4>2.使用 == 比较中的5条规则</h4>\n\n<p>虽然我们可以严格使用 <code>===</code>，不过了解<code>==</code>的习性还是很有必要的。</p>\n\n<p>⭐️根据 <code>==</code> 两侧的数据类型，我们总结出 5 条规则：</p>\n\n<ul><li><p>规则1：<code>NaN</code>和其他任何类型比较永远返回<code>false</code>(包括和他自己)。</p><p><code>javascript\nNaN == NaN // false\n</code></p></li><li><p>规则2：Boolean和其他任何类型比较，Boolean首先被转换为Number类型。</p><p><code>javascript\ntrue == 1  // true \ntrue == &#39;2&#39;  // false, 先把 true 变成 1，而不是把 &#39;2&#39; 变成 true\ntrue == [&#39;1&#39;]  // true, 先把 true 变成 1， [&#39;1&#39;]拆箱成 &#39;1&#39;, 再参考规则3\ntrue == [&#39;2&#39;]  // false, 同上\nundefined == false // false ，首先 false 变成 0，然后参考规则4\nnull == false // false，同上\n</code></p></li><li><p>规则3：<code>String</code>和<code>Number</code>比较，先将<code>String</code>转换为<code>Number</code>类型。</p><p><code>javascript\n123 == &#39;123&#39; // true, &#39;123&#39; 会先变成 123\n&#39;&#39; == 0 // true, &#39;&#39; 会首先变成 0\n</code></p></li><li><p>规则4：<code>null == undefined</code>比较结果是<code>true</code>，除此之外，<code>null</code>、<code>undefined</code>和其他任何结果的比较值都为<code>false</code>。</p><p><code>javascript\nnull == undefined // true\nnull == &#39;&#39; // false\nnull == 0 // false\nnull == false // false\nundefined == &#39;&#39; // false\nundefined == 0 // false\nundefined == false // false\n</code></p><ul><li><p>规则5：<code>原始类型</code>和<code>引用类型</code>做比较时，引用类型会依照<code>ToPrimitive</code>规则转换为原始类型</p></li></ul></li></ul>\n\n<pre><code>&gt; ⭐️`ToPrimitive`规则，是引用类型向原始类型转变的规则，它遵循先`valueOf`后`toString`的模式期望得到一个原始类型。\n&gt;\n&gt; 如果还是没法得到一个原始类型，就会抛出 `TypeError`\n\n```javascript\n&#39;[object Object]&#39; == {} \n// true, 对象和字符串比较，对象通过 toString 得到一个基本类型值\n&#39;1,2,3&#39; == [1, 2, 3] \n// true, 同上  [1, 2, 3]通过 toString 得到一个基本类型值\n```</code></pre>\n\n<p>&lt;span id=&quot;23&quot;&gt;&lt;/span&gt;</p>\n\n<h4>通过几个特别的题目来练习一下吧</h4>\n\n<h5>1.  <code>[] == ![]</code></h5>\n\n<p><code>\n\t- 第一步，![] 会变成 false\n\t- 第二步，应用 规则2 ，题目变成： [] == 0\n\t- 第三步，应用 规则5 ，[]的valueOf是0，题目变成： 0 == 0\n\t- 所以， 答案是 true ！// 骂人指数++\n</code></p>\n\n<h4>2. <code>[undefined] == false</code></h4>\n\n<p><code>\n\t- 第一步，应用 规则5 ，[undefined]通过toString变成 &#39;&#39;,\n\t  题目变成  &#39;&#39; == false\n\t- 第二步，应用 规则2 ，题目变成  &#39;&#39; == 0\n\t- 第三步，应用 规则3 ，题目变成  0 == 0\n\t- 所以， 答案是 true ！\n\t// 但是 if([undefined]) TMD又是个true ！骂人指数++\n</code></p>\n\n<h4>3. 更多的题目</h4>\n\n<p>更多的练习，大家去生活中去发现吧。（悲惨的生活）</p>\n\n<blockquote><p>⭐️强烈建议大家去找各种奇奇怪怪的题目，反复练习上面 5 条规则，直到烂熟于心。</p></blockquote>\n\n<p>&lt;span id=&quot;3&quot;&gt;&lt;/span&gt;</p>\n\n<h3>附录1：类型转换表</h3>\n\n<blockquote><p>这个表老实用了，在执行上面提到的转换规则时，可以参考这个对照表。</p></blockquote>\n\n<p>| 类型 | 值 | to Boolean | to Number | to String |\n| --- | --- | --- | --- | --- |\n| Boolean | true | true | 1 | &quot;true&quot; |\n| Boolean | false | false | 0 | &quot;false&quot; |\n| Number | 123 | true | 123 | &quot;123&quot; |\n| Number | Infinity | true | Infinity | &quot;Infinity&quot; |\n| Number | 0 | false | 0 | &quot;0&quot; |\n| Number | NaN | false | NaN | &quot;NaN&quot; |\n| String | &quot;&quot; | false | 0 | &quot;&quot; |\n| String | &quot;123&quot; | true | 123 | &quot;123&quot; |\n| String | &quot;123abc&quot; | true | NaN | &quot;123abc&quot; |\n| String | &quot;abc&quot; | true | NaN | &quot;abc&quot; |\n| Null | null | false | 0 | &quot;null&quot; |\n| Undefined | undefined | fasle | NaN | &quot;undefined&quot; |\n| Function | function(){} | true | NaN | &quot;function(){}&quot; |\n| Object | {} | true | NaN | &quot;[object Object]&quot; |\n| Array | [] | true | 0 | &quot;&quot; |\n| Array | [&quot;abc&quot;] | true | NaN | &quot;abc&quot; |\n| Array | [&quot;123&quot;] | true | 123 | &quot;123&quot; |\n| Array | [&quot;123&quot;, &quot;abc&quot;] | true | NaN | &quot;123,abc&quot; |</p>",
  "createdAt": 1577786810,
  "modified": 1577786810
}