{
  "id": "307",
  "title": "gitlab-ci 坑后感与指北",
  "keywords": [
    "ci",
    "cd",
    "gitlab"
  ],
  "content": "<blockquote><p>本文的目的:</p><p> 最主要是备忘, 其次是分享</p><p>疗效:</p><p>并不能让你一下子掌握CI/CD, 这只是一个比较完整的解决方案,其他基础知识,自行补充.</p></blockquote>\n\n<hr/>\n\n<h4>基调</h4>\n\n<blockquote><p>首先,这不是屠龙刀,不要奢望一篇文章可以走遍天下.这里只是提供一个具体的落地方案, 一个具体的技术选型.</p></blockquote>\n\n<hr/>\n\n<h4>阶段1: 代码仓库</h4>\n\n<p>关于 <strong>代码仓库</strong>, 本文选取的方案是 <code>gitlab</code></p>\n\n<p><code>gitlab</code>的搭建:</p>\n\n<p>以目前的情况来说, 推荐使用<code>docker</code>来搭建你的系统, 不然你会陷入各种膜明其妙的问题.</p>\n\n<blockquote><p>docker的知识, 请自行补充一下,篇幅有限不能展开细说.</p></blockquote>\n\n<p>在这里我推荐一个:</p>\n\n<p><code>https://hub.docker.com/r/sameersbn/gitlab/</code></p>\n\n<p>打开以后直接搜索<code>Quick Start</code>, 按照<code>docker-compose</code>的方式启动你的<code>gitlab</code>. </p>\n\n<blockquote><p>不要对英文心存恐惧 ---- 孔子</p></blockquote>\n\n<p>下载好  <code>docker-compose.yml</code>之后不要急着启动, 需要修改几个参数:</p>\n\n<blockquote><p>需要学习一点点yml的知识, 大约5分钟, 自行google</p></blockquote>\n\n<ul><li><code>GITLAB_SECRETS_DB_KEY_BASE</code>, </li><li><code>GITLAB_SECRETS_SECRET_KEY_BASE</code>, </li><li><code>GITLAB_SECRETS_OTP_KEY_BASE</code></li></ul>\n\n<p>上面三个是<code>gitlab</code>用于加密时用的key, 随便给个长度64的字符串, 这块不做 深究.</p>\n\n<ul><li><code>GITLAB_ROOT_EMAIL</code></li><li><code>GITLAB_ROOT_PASSWORD</code></li></ul>\n\n<p>上面两个就是初始化时管理员账号的<code>账号密码</code>, 按自己的需要填写</p>\n\n<ul><li><code>GITLAB_HOST</code></li></ul>\n\n<p>这是 <strong>gitlab</strong> 内部使用的地址, 这关系到你gitlab页面上的项目地址,没设置的话, 到时候显示的是<code>127.0.0.1</code>, 这个鬼才能<code>clone</code>下来.</p>\n\n<blockquote><p>这个 host 一旦设置, 初始化完就改不了了, 所以一定要在第一次启动之前 就设置好.</p></blockquote>\n\n<h5>启动</h5>\n\n<p><code>docker-compose up</code></p>\n\n<p>一系列的初始化信息以后, 你就能访问你的gitlab了.</p>\n\n<p>默认是  <code>http://{你的IP}:10080</code></p>\n\n<p><code>\n其他关于gitlab的使用技巧, 就不深入了.\n能关注这篇文章的都不是萌新了,这些内容自己补充吧.\n</code></p>\n\n<hr/>\n\n<h4>阶段2: 提交触发</h4>\n\n<p>接上文.</p>\n\n<p><code>gitlab-ci</code>在最新版的<code>gitlab</code>已经是内置的了, 只要项目里有<code>.gitlab-ci.yml</code>,同时有对应的<code>gitlab-runner</code>, 就能实现<code>CI</code>, 相比之下不需要太多的配置.</p>\n\n<blockquote><p>名词解释:</p><p>.gitlab-ci.yml:</p><p> 这是gitlab-ci使用的任务描述文件, 里面主要是定义CI的过程需要执行哪些行为, 简单说就是, 要进行哪几个步骤, 每个步骤是哪些命令.</p><p>gitlab-runner:</p><p> 另一个程序, 也可以用docker启动, 就是负责执行 CI 任务的机器人, runner这块后面会展开讲.</p></blockquote>\n\n<hr/>\n\n<p><strong>启动并注册<code>gitlab-runner</code></strong></p>\n\n<p>我们还是使用<code>docker</code>来启动,这是一个大方向</p>\n\n<pre><code>docker run -d --name gitlab-runner --restart always \\\n\n-v /srv/gitlab-runner/config:/etc/gitlab-runner \\\n\n-v /var/run/docker.sock:/var/run/docker.sock \\\n\ngitlab/gitlab-runner:latest</code></pre>\n\n<blockquote><p>想深入了解的话, 请看 </p><p>https://docs.gitlab.com/runner/install/docker.html</p></blockquote>\n\n<p><strong>敲黑板!!</strong></p>\n\n<p>在这里, 我们将宿主机的<code>docker.sock</code>映射进去,让<code>runner</code>可以跟宿主用同一个<code>daemon</code>, (意味着你进去runner内部执行<code>docker images</code>是可以看到外面的镜像列表的), 这样做是埋下一个<strong>伏笔</strong>, 以便后面阶段使用<code>dind</code>(docker in docker)时, 获得更好的体验.</p>\n\n<hr/>\n\n<p><strong>继续</strong></p>\n\n<p>好了, 这个时候你启动了一个<code>runner</code>, 你要告诉它应该到哪里去&quot;服役&quot;,</p>\n\n<p>这一步叫做: <strong>注册</strong></p>\n\n<blockquote><p>注册runner的方式请看 </p><p>https://docs.gitlab.com/runner/register/index.html#docker</p></blockquote>\n\n<p>不过, 还是请你使用以下命令来注册:</p>\n\n<pre><code>docker exec -it gitlab-runner gitlab-runner register \\\n\n--docker-volumes /var/run/docker.sock:/var/run/docker.sock \\\n\n--docker-privileged</code></pre>\n\n<p>这里使用了两个参数, 都是为了 <strong>docker in docker</strong> 能得到更好的体验而服务的.</p>\n\n<p>输入以上命令后, 根据提示填写信息, 其中:</p>\n\n<ul><li>host,token 这些, 请打开你刚装好的gitlab, 进入 <code>Admin area</code>-<code>Runners </code>,然后照着填写就是了</li><li>特别注意期间会让你选一个<code>executor </code>类型, 个人推荐最好的方式是<code>docker </code>, 至于<code>shell</code>这种方式, 玩玩可以,实际使用时副作用太多.</li><li>更多参数的细节, 自行研究.</li></ul>\n\n<p>完成以上步骤之后, 你在<code>gitlab</code> - <code>Admin area</code>-<code>Runners </code>页面就能看到注册好的<code>runner</code>了, 当然你现在还是感觉不到它的作用.</p>\n\n<pre><code>这个环节内容比较多, 操作比较多, 走到这里建议休息一下喝杯茶.</code></pre>\n\n<hr/>\n\n<h4>阶段3: Runner Job</h4>\n\n<p>这个阶段, 是指代码提交以后, <code>gitlab-runner</code>会自动读取项目的<code>.gitlab-ci.yml</code>, 运行里面定义的每个<code>Job</code>.</p>\n\n<p>这里给出一个极简的<code>.gitlab-ci.yml</code>例子,</p>\n\n<p>它做的就是, 在提交代码以后, 自动的<strong>测试</strong>, 自动的<strong>构建</strong>, 自动的<strong>发布</strong> :</p>\n\n<pre><code>stages:\n  - test\n  - build\n  - deploy\n\njob_01:\n  stage: test\n  image: dev_tool/node_builder:1.0.0\n  script: \n   - npm install --registry=https://registry.npm.taobao.org\n   - node server.js &amp;\n   - node test_api.js\n\njob_02:\n  stage: build\n  image: gitlab/dind\n  script:\n  - docker build -t ci-demo:latest .\n\njob_03:\n  stage: deploy\n  image: dev_tool/rancher-cli:latest\n  script:\n  - rancher-tool init\n  - rancher up -d  --pull --force-upgrade --confirm-upgrade</code></pre>\n\n<p>一目了然, 上面的第一个定义: <code>stages</code> 数组,</p>\n\n<p>意思是这个项目的<code>CI/CD</code>过程要执行三个步骤(<code>stage</code>),</p>\n\n<p>分别是<code>test测试</code>-<code>build编译</code>-<code>deploy发布</code></p>\n\n<p>然后下面的三个<code>job_*</code>,名字是随意的, 重点是里面的<code>stage</code>属性,</p>\n\n<p>告诉<code>gitlab-ci</code>这个任务是在哪个<code>stage</code>执行的,</p>\n\n<p>一个<code>stage</code>你可以写很多个<code>job</code></p>\n\n<p><strong>敲黑板!!!</strong> </p>\n\n<p>需要注意的是, 我们之前选择了<code>docker executor</code>, <code>job</code>里面就要声明<code>image</code>属性,指定这个<code>Job</code>的<code>scripts</code>要在哪个<code>image</code>里面运行.</p>\n\n<p><strong>重点说明!! 再次大力敲黑板!!</strong></p>\n\n<p>这里第二步使用了<code>gitlab/dind</code> , 仔细看<code>script</code>, 这是在一个容器里面去构建一个镜像, 为了<strong>整体体验</strong>与<strong>构建效率</strong>着想, 我们之前注册<code>runner</code>的时候,将宿主机的<code>docker.sock</code>映射进去是十分必要的!!\n(重新翻上去看吧)</p>\n\n<p><strong>看到这里, 聪明的朋友已经发现了,</strong></p>\n\n<p>我们需要自己<strong>打造</strong>一批用于运行<code>Job</code>的基础镜像, 这些镜像里要预先安装好我们需要的依赖环境.</p>\n\n<p>举个栗子:</p>\n\n<p>你要在<code>build</code>这一步做<code>webpack</code>打包的话, 你要准备好一个内部安装好<code>webpack</code>的镜像(相关的<code>node</code>,<code>npm</code>之类就更不用说了)</p>\n\n<p><strong>听起来好麻烦?</strong></p>\n\n<p>也不是, 这是个 <strong>功在当代,利在千秋</strong> 的行为, 前期打造好基础镜像, 后面的项目就可以很容易写<code>CI Job</code>了.</p>\n\n<blockquote><p>更多 gitlab-ci.yml 的高级写法,还是建议看官方文档\nhttps://docs.gitlab.com/ee/ci/yaml/README.html</p></blockquote>\n\n<hr/>\n\n<h4>阶段4: 坐享其成 &amp;&amp; 总结</h4>\n\n<p>如果按照上面的步骤把这个系统搭建起来以后, 你应该已经能够感受到<code>gitlab-ci</code>带来的好处了.</p>\n\n<p>现在你只管提交代码, 就能快速看到新功能集成到相应的环境了.</p>\n\n<p>此后, 你只要写好每一步的<code>Job</code> 就可以了.</p>\n\n<p>尤其是<strong>测试</strong>这个环节.</p>\n\n<p>尤其是<strong>测试</strong>这个环节. </p>\n\n<p>尤其是<strong>测试</strong>这个环节.</p>\n\n<hr/>\n\n<h3>后记</h3>\n\n<ul><li><code>gitlab</code> 真的很吃资源, 虚拟机玩够呛, 团队用的话, 建议装一台PC来搭建.</li><li><code>基础镜像</code>别偷懒, 多打磨,让你的<code>scripts</code>可以更简洁</li><li>更进一步的话, 自己开发一系列的命令行工具, 让你的<code>scripts</code>更强大. </li><li>有事找我, 包教会.</li></ul>",
  "createdAt": 1514636100,
  "modified": 1514642654
}