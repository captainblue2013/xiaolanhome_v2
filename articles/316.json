{
  "id": 316,
  "title": "多条件短路优化实测",
  "keywords": [
    "javascript",
    "优化"
  ],
  "content": "<h3>什么是多条件短路</h3>\n\n<p>型如 <strong>if (A &amp;&amp; B &amp;&amp; C)</strong> 这样的多个条件组成的逻辑语句，</p>\n\n<p>通过调整每个因子的顺序，利用<strong>短路</strong>来实现执行效率的优化。</p>\n\n<blockquote><p><a href=\"https://www.zhihu.com/question/39209736/answer/80208676\">知乎：逻辑运算符特有的短路效应是什么</a></p></blockquote>\n\n<h3>口说无凭，真实场景模拟测试</h3>\n\n<p>首先定义三个逻辑单元：</p>\n\n<pre><code>const conditionA = ()=&gt;{\n  return Math.random() &gt; 0.25;å\n}\n\nconst conditionB = ()=&gt;{\n  return Math.random() &gt; 0.5;\n}\n\nconst conditionC = ()=&gt;{\n  return Math.random() &gt; 0.75;\n}</code></pre>\n\n<p>显而易见， 以上三个逻辑， 返回 <strong>true</strong>的概率是逐渐递减的。</p>\n\n<p>我们以此来做实验样本。</p>\n\n<pre><code>const Benchmark = require(&#39;benchmark&#39;);\nconst suite = new Benchmark.Suite;\n\nsuite.add(&#39;A || B || C&#39;, function () {\n  if(conditionA() || conditionB() || conditionC()){\n    // A或B或C， 大概率true的放前面\n  }\n}).add(&#39;C || B || A&#39;, function () {\n  if(conditionC() || conditionB() || conditionA()){\n    // C或B或A， 小概率true的放前面\n  }\n}).add(&#39;A &amp;&amp; B &amp;&amp; C&#39;, function () {\n  if(conditionA() &amp;&amp; conditionB() &amp;&amp; conditionC()){\n    // A且B且C, 大概率true的放前面\n  }\n}).add(&#39;C &amp;&amp; B &amp;&amp; A&#39;, function () {\n  if(conditionC() &amp;&amp; conditionB() &amp;&amp; conditionA()){\n    //C且B且A， 小概率true的放前面\n  }\n}).on(&#39;cycle&#39;, function (event) {\n  console.log(String(event.target));\n}).on(&#39;complete&#39;, function () {\n  console.log(&#39;Fastest is &#39; + this.filter(&#39;fastest&#39;).map(&#39;name&#39;));\n}).run({ &#39;async&#39;: true });</code></pre>\n\n<p>以上代码应该比较好懂， 测试 <code>||</code><code>&amp;&amp;</code> 两种情况下，不同的排列顺序对执行效率的影响，</p>\n\n<p><strong>如果实在思路转不过来， 多看几遍代码。</strong></p>\n\n<h4>结果：</h4>\n\n<pre><code>A || B || C x 29,734,965 ops/sec ±1.42% (88 runs sampled)\n\nC || B || A x 19,663,159 ops/sec ±0.57% (90 runs sampled)\n\nA &amp;&amp; B &amp;&amp; C x 19,865,675 ops/sec ±0.63% (89 runs sampled)\n\nC &amp;&amp; B &amp;&amp; A x 30,679,108 ops/sec ±0.52% (88 runs sampled)</code></pre>\n\n<p><strong>结论：</strong></p>\n\n<ul><li>多个 <strong>||</strong> 条件，把大概率<strong>true</strong>的条件写最前面，效率更高。</li><li>多个 <strong>&amp;&amp;</strong> 条件，把小概率<strong>true</strong>的条件写最前面，效率更高。</li></ul>\n\n<h4>为什么？</h4>\n\n<p><strong>||</strong>遇到<strong>true</strong>就会短路， 反之， <strong>&amp;&amp;</strong>遇到<strong>false</strong>也会短路。</p>\n\n<p>明白了吗？</p>\n\n<blockquote><p>完整代码：将上面两段合在一起就是。</p></blockquote>",
  "createdAt": 1520585167,
  "modified": 1520585167
}