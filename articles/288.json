{
  "id": "288",
  "title": "[转]阻止UPDATE语句没有添加WHERE条件的发生",
  "keywords": [
    "mysql",
    "update"
  ],
  "content": "<p>支持原创请访问：<a href=\"http://wing324.github.io/2016/05/01/%E5%A6%82%E4%BD%95%E5%9C%A8MySQL%E4%B8%AD%E9%98%BB%E6%AD%A2UPDATE%E8%AF%AD%E5%8F%A5%E6%B2%A1%E6%9C%89%E6%B7%BB%E5%8A%A0WHERE%E6%9D%A1%E4%BB%B6%E7%9A%84%E5%8F%91%E7%94%9F/\">原文地址</a></p>\n\n<p>如果在生产环境中使用UPDATE语句更新表数据，此时如果忘记携带本应该添加的WHERE条件，那么。。</p>\n\n<p>Oh,no…后果可能不堪设想。。。</p>\n\n<p>之前就遇到一个同事在生产环境UPDATE忘记携带WHERE条件。。\n于是只能从binlog日志中找到相关数据，然后去恢复。。宝宝当时表示心好累。。。\n那么有没有什么办法可以阻止这样的事情发生，又不使用任何的审核工具呢。。。\n办法当然是有的，请听我说~</p>\n\n<p>sql_safe_updates</p>\n\n<p>sql_safe_updates这个MySQL自带的参数就可以完美的解决我们的问题，并且该参数是可以在线变更的哦~\n当该参数开启的情况下，你必须要在UPDATE语句后携带WHERE条件，否则就会报出ERROR。。</p>\n\n<p>举个栗子</p>\n\n<pre><code># sql_safe_updates=0,即未开启\nroot@127.0.0.1 : test 07:58:34&gt; set sql_safe_updates=0;\nQuery OK, 0 rows affected (0.00 sec)\n\nroot@127.0.0.1 : test 07:58:43&gt; show variables like &#39;sql_safe_updates&#39;;\n+------------------+-------+\n| Variable_name    | Value |\n+------------------+-------+\n| sql_safe_updates | OFF   |\n+------------------+-------+\n1 row in set (0.00 sec)\n\nroot@127.0.0.1 : test 07:58:55&gt; select * from t;\n+-------+\n| pd    |\n+-------+\n| hello |\n| mysql |\n+-------+\n2 rows in set (0.00 sec)\n\nroot@127.0.0.1 : test 07:58:59&gt; begin;\nQuery OK, 0 rows affected (0.00 sec)\n\nroot@127.0.0.1 : test 07:59:04&gt; update t set pd=&#39;MySQL&#39;;\nQuery OK, 2 rows affected (0.00 sec)\nRows matched: 2  Changed: 2  Warnings: 0\n\nroot@127.0.0.1 : test 07:59:12&gt; select * from t;\n+-------+\n| pd    |\n+-------+\n| MySQL |\n| MySQL |\n+-------+\n2 rows in set (0.00 sec)\n\n# sql_safe_updates=1,即开启\nroot@127.0.0.1 : test 08:00:00&gt; set sql_safe_updates=1;\nQuery OK, 0 rows affected (0.00 sec)\n\nroot@127.0.0.1 : test 08:00:11&gt; show variables like &#39;sql_safe_updates&#39;;\n+------------------+-------+\n| Variable_name    | Value |\n+------------------+-------+\n| sql_safe_updates | ON    |\n+------------------+-------+\n1 row in set (0.00 sec)\n\nroot@127.0.0.1 : test 08:00:16&gt; select * from t;\n+-------+\n| pd    |\n+-------+\n| hello |\n| mysql |\n+-------+\n2 rows in set (0.00 sec)\n\noot@127.0.0.1 : test 08:00:25&gt; begin;\nQuery OK, 0 rows affected (0.00 sec)\n\nroot@127.0.0.1 : test 08:00:27&gt; update t set pd=&#39;MySQL&#39;;\nERROR 1175 (HY000): You are using safe update mode and you tried to update a table without a WHERE that uses a KEY column</code></pre>\n\n<p>如上属的栗子所示，当参数sql_safe_updates开启的时候，UPDATE语句不携带WHERE条件将会爆出一个错误。。所以小心使用UPDATE语句是真的很重要哇。。。</p>",
  "createdAt": 1462272480,
  "modified": 1491557696
}