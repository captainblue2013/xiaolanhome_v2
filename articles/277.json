{
  "id": "277",
  "title": "Javascript  对象之   Object.defineProperty",
  "keywords": [
    "javascript",
    "object"
  ],
  "content": "<p>平时我们定义一个对象，给它添加属性，通常会这样做</p>\n\n<pre><code> var o = {};\n o.foo = function(){\n    console.log(&#39;foo&#39;);\n}\no.foo(); // print  &#39;foo&#39;</code></pre>\n\n<p>这是可行的，但是如果我们这样</p>\n\n<pre><code>o.foo = null;</code></pre>\n\n<p>foo就被改变了，然后引起  TypeError: o.foo is not a function  的错误。</p>\n\n<h2>于是，Object.defineProperty 就进入我们视野</h2>\n\n<pre><code>var a = {};\nObject.defineProperty(a,&#39;foo&#39;,{\n    value:function(){\n        console.log(&#39;foo..&#39;);\n    }\n});</code></pre>\n\n<p>这样，foo就不会被改变，强行赋值（o.foo = null;）在严格模式下会出 TypeError: &quot;foo&quot; is read-only 错误</p>\n\n<h2>解读：</h2>\n\n<pre><code>Object.defineProperty 接受三个参数，\n第一个为对象，要添加属性的对象；\n第二个为属性的名字，字符串；\n第三个是一个对象，是对新添加的属性的一些设置，</code></pre>\n\n<p>重点讲第三个参数，它有以下设置项：</p>\n\n<pre><code>value：属性的值，可以是基本属性、对象、函数等等\n\nwritable：是否可以写，默认false，所以上面的foo是readonly\n\nconfigurable：是否可以修改设置，默认false，即定义过以后是否能再次修改设置项\n\nenumerable：是否能被枚举，关系到for in 或者 Object.keys的时候会不会被列出来\n\nget、set：设置了get、set就不能设置 writable 或 value，不然会报错，这是对属性读写时的钩子，下面有栗子\n\nvar b = 1;\nvar a = {};\n    Object.defineProperty(a,&#39;foo&#39;,{\n      set:function(v){\n        b = v;\n        console.log(&#39;set&#39;);// you can do any thing here\n      },\n      get:function(){\n        console.log(&#39;get&#39;);  // you can do any thing here\n        return b;\n      }\n    });\na.foo;  // print &#39;get&#39; ,return 1\na.foo = 2; // print &#39;set&#39; ,return 2\na.foo; //  print &#39;get&#39;  ,return 2</code></pre>\n\n<h2>是不是很棒？</h2>",
  "createdAt": 1453862040,
  "modified": 1453862732
}