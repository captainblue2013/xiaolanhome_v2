{
  "id": "67",
  "title": "Javascript 闭包与作用域",
  "keywords": [
    "闭包"
  ],
  "content": "<h4>1.Javascript的作用域是函数作用域而非块级作用域</h4>\n\n<pre><code>//C语言\n#include &lt;stdio.h&gt;\nvoid main()\n{\n  int i=2;\n  i--;\n  if(i)\n  {\n     int j=3;\n  }\n  printf(&quot;%d/n&quot;,j);\t\t\n  //use an undefined variable:j\n}</code></pre>\n\n<p>这是因为c中的作用域是块级的，j是在if后的{ }中定义的，所以无法访问，然而在js中会是什么情况？\n    (function(){\n        var i=1;\n        if(i==1){\n        var j=3;\n        }\n        console.log(j);\t //3\n    })()</p>\n\n<p>在这里，j是可以访问的，也就是说在一个函数中的任何位置定义的变量在该函数中的任何地方都是可见的</p>\n\n<p>这里提及一句Javascript的作用域链（<code> scope chain </code>），每个函数 定义 时都会将他的作用域链定设为他定义的环境</p>\n\n<pre><code>function a(){\n    function b(){\n        //code\n    }\n}</code></pre>\n\n<p>这段代码中，b的环境为a，a的环境为全局（<code>window</code>），在b中查找变量时会先搜索自身函数内部，如果不存在就去a的内部查找，还不存在就去全局中查找，若还是找不到就是undefined，这就构成一条链</p>\n\n<h4>2.Javascript中变量的作用域分为全局变量和局部变量</h4>\n\n<p>在函数内部可以访问全局变量和函数内的局部变量，而在函数外部访问不到函数内的变量，看代码</p>\n\n<pre><code>var p=11;\nfunction f1(){\n    console.log(p);\n}\nf1();   //11\n\nfunction f1(){\n    var p=11;\n}\nf1();\nconsole.log(p);  //ReferenceError: p is not defined</code></pre>\n\n<p>通过这俩段代码可以理解全局变量和局部变量，但是定义局部变量时<code>一定要注意加上 var</code> ，如果不加上其实定义的是一个全局变量，看代码</p>\n\n<pre><code>function f1(){\n    p=11;\n}\nf1();\nconsole.log(p);       //11</code></pre>\n\n<h4>3.那如何访问函数内部的变量并对它进行操作呢？这里就需要用到闭包</h4>\n\n<p>先看看闭包的官方解释：<code> 闭包是一个拥有许多变量和绑定了这些变量的环境的表达式（通常是一个函数），因而这些变量也是该表达式的一部分</code></p>\n\n<p>看到这句户我不禁想问，这是个啥？</p>\n\n<p>后来参考了一些博客和《Javascript秘密花园》才开始理解，闭包大概就是函数内部的一个函数被外部调用，这样就可以调用内部变量了，比如下面这段</p>\n\n<pre><code>function f1(){\n  var p=11;\n    return {\n      increment: function() {\n        p++;\n      },\n\n      show: function() {\n        alert(p)\n      }\n    }\n}\nvar f=f1();\nf.show();\t  //11\nf.increment();\nf.show();\t  //12</code></pre>\n\n<p>这里可以看到，f包含increment和show两个函数，而这两个函数是f1的内部函数所以可以访问p这个变量，在我理解，这里的increment和show就是f1()的两个闭包，用他们就可以从外部调用这个变量</p>\n\n<h4>4.闭包可以做些什么？</h4>\n\n<p>首先我觉得可以模拟<code>private</code>，就像上面那段代码，这个变量只能在这个函数内部访问，也只有使用了闭包才能访问</p>\n\n<p>第二，和Javascript的垃圾回收有关，这里我还不是很清楚，等到搞明白了再来补上</p>\n\n<p>5.这里有一个要注意的就是循环中使用闭包的问题，这里借用《<code>Javascript秘密花园</code>》里的一个例子</p>\n\n<pre><code>function f1(){\n  for(var i = 0; i &lt; 10; i++) {\n    setTimeout(function() {\n        console.log(i);  \n    }, 1000);\n  }\n}\nf1();</code></pre>\n\n<p>这段代码输出的是10个10而不是期望的0到9，因为闭包内是对i的引用，然后函数执行时i已经变成了10，这里可以使用自执行的匿名函数</p>\n\n<pre><code>function f1(){\n  for(var i = 0; i &lt; 10; i++) {\n     (function(e) {\n        setTimeout(function() {\n            console.log(e);  \n        }, 1000);\n    })(i);    \n  }\n}\nf1();</code></pre>\n\n<p>这里的匿名函数将i作为参数，这里的e会有i的一个拷贝，而引用时是对e的引用，这就避免了上述的问题</p>",
  "createdAt": 1410409980,
  "modified": 1415952324
}