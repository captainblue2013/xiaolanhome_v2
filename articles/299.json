{
  "id": "299",
  "title": "【PHP】比较 exit  和  die",
  "keywords": [
    "php",
    "die",
    "exit"
  ],
  "content": "<blockquote><p>无意中在网上看到 <code>exit</code> 和 <code>die</code> 的区别，歪果仁一言不合就讨论开了，其中不乏一些有趣的结论。</p></blockquote>\n\n<h4>官方：<code>exit</code> 和 <code>die</code> 是一样的</h4>\n\n<p>PHP Manual for exit:</p>\n\n<pre><code>Note: This language construct is equivalent to die().</code></pre>\n\n<p>PHP Manual for die:</p>\n\n<pre><code>This language construct is equivalent to exit().</code></pre>\n\n<p>PHP官方明确指明这两个是一样的，并且有以下佐证：</p>\n\n<p><a href=\"http://php.net/manual/en/aliases.php\">List of Function Aliases (函数别名列表)</a>\n，在这个列表里，<code>exit</code> 是主函数，<code>die</code>是别名，PHP官方不推荐用别名，因为这有可能会在将来的版本里被干掉。（可能性不大）</p>\n\n<p>另一个证据更充分，有人分析了 <code>parser token</code>， 两者解释出来都是 <code>T_EXIT</code></p>\n\n<p>意思就是，php解释这两个的时候，对应的是同一个东西。</p>\n\n<h4>坊间，两者还是有一些区别的</h4>\n\n<ul><li><p>起源不一样</p><p>php的诞生是参考了很多语言的, 可以参考 <a href=\"https://exploringdata.github.io/vis/programming-languages-influence-network/#PHP\">这里</a> 。</p><p>php主要受 <code>Perl</code>, <code>C</code>, <code>Python</code>, <code>C++</code>, <code>C#</code>, <code>Tcl</code>, <code>Java</code>, <code>Smalltalk</code> 影响。</p><p>而 <code>exit</code>是来源于 <code>C</code>语言中的 exit(),<code>die</code>是来源于<code>Perl</code>中的 die 。</p></li><li><p>角度刁钻，解释起来效率不一样</p><p>有一位歪果仁，没学过php，但是从脚本语言解释的角度分析了两者的区别。</p><p>大体意思就是，php被解释的时候, 一些函数、变量之类会被翻译成<code>TOKEN</code>，</p><p>如果在你的项目里 <code>d</code>开头的函数比较多，那<code>die</code>解释起来就慢，反之亦然。</p><p>我觉得这个也是有一定的道理的，至少在解释阶段确实是存在差异。</p></li><li><p>从语义的角度看</p><p>也有的朋友从语义的角度分析， </p><p><code>die</code>是程序挂了，一般用于出错的场合：</p><pre><code>if( $data === false ) {\n\tdie( &quot;Failure.&quot; ); // something wrong\n}</code></pre><p><code>exit</code>表示程序退出，一般是正常退出</p><pre><code>// start\n// all thing done\n// and exit as normal\nexit(0);</code></pre><p>这个观点是相当有建设性的，我一贯坚持代码首先是给人看的，</p><p>这样的区分使用是对代码可读性的很好实践。</p></li></ul>",
  "createdAt": 1470378670,
  "modified": 1470378670
}