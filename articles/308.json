{
  "id": 308,
  "title": "从一个页面开关, 说说有限状态机",
  "keywords": [
    "js",
    "javascript",
    "有限状态机"
  ],
  "content": "<blockquote><p>故事起源于最近看一位朋友在实现一个 播放/暂停 按钮时, 一些思路上的碰撞,\n于是整理出本文, 讲解一下如何用 有限状态机 使代码更简洁可靠.</p></blockquote>\n\n<p><img alt=\"\" src=\"http://bluestest.oss-cn-shanghai.aliyuncs.com/on_off.png\"/></p>\n\n<p>我们想实现上面这样的按钮交互, 先看看原版实现:</p>\n\n<pre><code>$(&#39;#botton&#39;).on(&#39;click&#39;, function(){\n\tif ( $(this).text() === &#39;OFF&#39; ){\n\t\t//把按钮的文案改变一下\n\t\t$(this).text(&#39;ON&#39;);\n\t\t//开始播放\n\t\t$(&#39;#player&#39;).start();\n\t} else {\n\t\t$(this).text(&#39;OFF&#39;);\n\t\t$(&#39;#player&#39;).stop();\n\t}\n});</code></pre>\n\n<p>这是一个基本的实现方式, 也是一个最简单的方式.</p>\n\n<p>不过,</p>\n\n<p>按照这个方式来做有几个不太优雅的地方:</p>\n\n<ul><li>如果点击按钮之后, 需要做的操作增加, 会让<code>if / else</code>里面的代码越来越臃肿.</li><li>如果按钮的变化不止 <code>on/off</code>两种, 我们可能需要些一堆 <code>else if</code>或者用<code>switch / case</code></li></ul>\n\n<h4>针对以上状况, 我提议试试使用<strong>有限状态机</strong>来解决问题</h4>\n\n<p>先看代码:</p>\n\n<pre><code>var fsm = (function(){\n\t//初始状态\n\tvar status = 1; \n\n\t//状态对应的操作\n\tvar mapping = {\n\t\t&#39;1&#39;: {\n\t\t\ttext:&#39;ON&#39;,\n\t\t\taction: $(&#39;#player&#39;).start\n\t\t},\n\t\t&#39;-1&#39;: {\n\t\t\ttext:&#39;OFF&#39;,\n\t\t\taction: $(&#39;#player&#39;).stop\n\t\t},\n\t};\n\n\treturn function(btn){\n\t\t//通过 *-1 实现status从 1/-1 切换\n\t\tstatus *= -1;\n\t\tbtn.text( mapping[status].text );\n\t\tvar fn = mapping[status].action;\n\t\tfn();\n\t}\n})();\n\n$(&#39;#botton&#39;).click(function(){\n\tfsm(this);\n});</code></pre>\n\n<p>阅读上面代码能发现, 对<code>botton</code>的点击事件处理, 只需要调用<code>fsm</code>函数即可, 内部的变化和操作, 都不需要暴露出来.</p>\n\n<p><code>fsm</code>内部, 通过<code>mapping</code>来定义和限制行为, 唯一能够改变的只有<code>status</code>,</p>\n\n<p>这样的好处在于, 能够避免在编码过程中人为的错误, 因为事件响应部分只能有限的操作状态机的<code>status</code>,而不是直接参与<code>botton</code>的行为与表现.</p>\n\n<p>同时, 功能的扩展, 状态的增减, 都只需要在<code>mapping</code>里面定义好, 非常利于扩展与维护.</p>",
  "createdAt": 1516850982,
  "modified": 1516850982
}